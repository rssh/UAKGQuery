#@synopsis RSSH_CHECK_MICO
#
# support macroses for MICO CORBA ORB
#        (see http://www.mico.org)
#
#@author (C) Ruslan Shevchenko <Ruslan@Shevchenko.Kiev.UA>, 1998, 2000, 2003
#
#@id $Id: RSSH_CHECK_MICO.m4,v 1.2 2003-11-12 17:11:00 rin Exp $
#
AC_DEFUN([RSSH_CHECK_MICO],[
AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_PROG_CXX])dnl
AC_REQUIRE([AC_PROG_CPP])dnl
AC_REQUIRE([AC_PROG_CXXCPP])dnl


AC_ARG_WITH(mico, [mico: prefix to MICO installation (default: /usr/local/)] ,\
            MICO_PREFIX=${with_mico} , MICO_PREFIX="yes" )

AC_CHECKING(for MICO)

if test "x$MICO_PREFIX" = "xno"
then
 mico=no
else

svCXXCPPFLAGS=$CXXCPPFLAGS
svCXXFLAGS=$CXXFLAGS
svCPPFLAGS=$CPPFLAGS
svLIBS=$LIBS
svLDFLAGS=$LDFLAGS
svRSSH_ROLLBACK=$rssh_rollback
rssh_rollback="true"


RSSH_ENABLE_PTHREADS
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

ORB_INCLUDES="-I$MICO_PREFIX/include "
CXXCPPFLAGS="$CXXCPPFLAGS $ORB_INCLUDES"
CPPFLAGS="$CPPFLAGS $ORB_INCLUDES"

AC_CHECK_HEADER( CORBA.h, mico=yes , mico=no, )

if test "x$mico" = "xyes" 
then
  MICO_VERSION=` sed -n '/MICO_VERSION/ { y/b/./; s#^[^"]*"\([^"]*\)".*#\1#p; }' \
  "$MICO_PREFIX/include/mico/version.h" `
  LDFLAGS="$LDFLAGS -L$MICO_PREFIX/lib"
  AC_CHECK_LIB(socket,socket, LIBS="-lsocket $LIBS",,)
  AC_CHECK_LIB(nsl,gethostbyname, LIBS="-lnsl $LIBS",,)
  AC_CHECK_LIB(dl,dlopen, LIBS="-ldl $LIBS",,)
  AC_CHECK_LIB(dl,dlopen, LIBS="-ldl $LIBS",,)
  AC_CHECK_LIB(crypto,BIO_ctrl, LIBS="-lcrypto $LIBS",,)
  AC_CHECK_LIB(ssl,SSL_library_init, LIBS="-lssl $LIBS",,)
  YAD_CHECK_INCLUDE_LIB([#include <CORBA.h>],mico$MICO_VERSION,CORBA::ORB_var orb, LIBS="-lmico$MICO_VERSION $LIBS",mico_libs=no,-lmico$MICO_VERSION)
  LIBS="$LDFLAGS $LIBS"
fi

if test "x$mico_libs" = "xno"
then
 mico=no
fi

fi

if test "x$mico" = "xno"
then
  CXXCPPFLAGS=$svCXXCPPFLAGS
  CPPFLAGS=$svCPPFLAGS
  LIBS=$svLIBS
  LDFLAGS=$svLDFLAGS
  eval "$rssh_rollback"
  rssh_rollback=$svRSSH_ROLLBACK
else
  ORB_PREFIX=$MICO_PREFIX
  AC_SUBST(ORB_PREFIX)

  ORB=MICO
  AC_SUBST(ORB)

  IDL=$MICO_PREFIX/bin/idl
  AC_SUBST(IDL)

  IDLFLAGS="$IDLFLAGS -I$MICO_PREFIX/include/mico"
  AC_SUBST(IDLFLAGS)

  ORB_INCLUDE_PREFIX=mico
  AC_SUBST(ORB_INCLUDE_PREFIX)


  IDL_CLN_H=.h
  IDL_CLN_H_SUFFIX=.h
  IDL_CLN_H_BEFOREDOT_SUFFIX=
  IDL_CLN_H_EXT=h
  IDL_CLN_H1_SUFFIX=no
  AC_SUBST(IDL_CLN_H,$IDL_CLN_H)
  AC_SUBST(IDL_CLN_H_SUFFIX,$IDL_CLN_H_SUFFIX)
  AC_SUBST(IDL_CLN_H1_SUFFIX,$IDL_CLN_H1_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_CLN_H_SUFFIX,$IDL_CLN_H_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_CLN_H_BEFOREDOT_SUFFIX,$IDL_CLN_H_BEFOREDOT_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_CLN_H_EXT,$IDL_CLN_H_EXT)

  IDL_CLN_CPP=.cc
  IDL_CLN_CPP_SUFFIX=.cc
  AC_SUBST(IDL_CLN_CPP,$IDL_CLN_CPP)
  AC_SUBST(IDL_CLN_CPP_SUFFIX,$IDL_CLN_CPP_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_CLN_CPP_SUFFIX,$IDL_CLN_CPP_SUFFIX)

  IDL_CLN_O=.o 
  IDL_CLN_OBJ_SUFFIX=.o 
  AC_SUBST(IDL_CLN_O,$IDL_CLN_O)
  AC_SUBST(IDL_CLN_OBJ_SUFFIX,$IDL_CLN_OBJ_SUFFIX)

  IDL_SRV_H=.h 
  IDL_SRV_H_SUFFIX=.h 
  IDL_SRV_H_BEFOREDOT_SUFFIX=
  IDL_SRV_H_EXT=h
  IDL_SRV_H1_SUFFIX=no 
  AC_SUBST(IDL_SRV_H,$IDL_SRV_H)
  AC_SUBST(IDL_SRV_H_SUFFIX,$IDL_SRV_H_SUFFIX)
  AC_SUBST(IDL_SRV_H1_SUFFIX,$IDL_SRV_H1_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_SRV_H_SUFFIX,$IDL_SRV_H_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_SRV_H_BEFOREDOT_SUFFIX,$IDL_SRV_H_BEFOREDOT_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_SRV_H_EXT,$IDL_SRV_H_EXT)

  IDL_SRV_CPP=.cc
  IDL_SRV_CPP_SUFFIX=.cc
  AC_SUBST(IDL_SRV_CPP)
  AC_SUBST(IDL_SRV_CPP_SUFFIX)
  AC_DEFINE_UNQUOTED(IDL_SRV_CPP_SUFFIX,$IDL_SRV_CPP_SUFFIX)

  IDL_SRV_O=.o
  IDL_SRV_OBJ_SUFFIX=.o
  AC_SUBST(IDL_SRV_O,$IDL_SRV_O)
  AC_SUBST(IDL_SRV_OBJ_SUFFIX,$IDL_SRV_OBJ_SUFFIX)

  IDL_TIE_H_SUFFIX=no
  IDL_TIE_H1_SUFFIX=no
  IDL_TIE_CPP_SUFFIX=no
  AC_SUBST(IDL_TIE_H_SUFFIX,$IDL_TIE_H_SUFFIX)
  AC_SUBST(IDL_TIE_H1_SUFFIX,$IDL_TIE_H1_SUFFIX)
  AC_SUBST(IDL_TIE_CPP_SUFFIX,$IDL_TIE_CPP_SUFFIX)

  CORBA_H='CORBA.h'
  AC_DEFINE_UNQUOTED(CORBA_H,<$CORBA_H>)

  COSNAMING_H='coss/CosNaming.h'
  AC_DEFINE_UNQUOTED(COSNAMING_H,<$COSNAMING_H>)

  YAD_CHECK_INCLUDE_LIB([#include <$CORBA_H>
#include <$COSNAMING_H>],micocoss$MICO_VERSION,CORBA::Object_var obj; CosNaming::NamingContext_ptr nc = CosNaming::NamingContext::_narrow(obj),have_micocoss=yes,have_micocoss=no)
  if test "$have_micocoss" = yes 
  then
    ORB_COSNAMING_LIB="-lmicocoss$MICO_VERSION"
  else
    AC_MSG_ERROR("found MICO but can not find MICO CosNaming libraries")
  fi
   
  AC_SUBST(ORB_COSNAMING_LIB)

  HAVE_ORB_IDL=1
  AC_SUBST(HAVE_ORB_IDL)

  CORBA_HAVE_POA=1
  AC_DEFINE_UNQUOTED(CORBA_HAVE_POA,$CORBA_HAVE_POA)

  AC_DEFINE(CORBA_MODULE_NAMESPACE_MAPPING)
  
  AC_DEFINE(MICO)
  AC_DEFINE(CORBA_SYSTEM_EXCEPTION_IS_STREAMBLE)
  AC_DEFINE(CORBA_ORB_HAVE_DESTROY)

fi

AC_LANG_RESTORE

AC_MSG_RESULT(for MICO: $mico)

])dnl
dnl
